<?php
/**
 * @file
 * Special Topic Module.
 * by yplam@yplam.com
 */


 /***************************************************************
 * Drupal General hooks
 ***************************************************************/

 /**
 * Implementation of hook_permission().
 */
function special_topic_permission() {
  return array(
    'create special-topic' => array(
      'title' => t('Create special topic'),
      'description' => t('Create new special topic.'),
    ),
    'edit any special-topic' => array(
      'title' => t('Edit any panel-nodes'),
      'description' => t('Edit all pre-existing special topic regardless of ownership.'),
    ),
    'edit own special-topic' => array(
      'title' => t('Edit own special topic'),
      'description' => t('Edit special topic owned by this user.'),
    ),
    'administer special-topic' => array(
      'title' => t('Administer special topic'),
      'description' => t('Full administrative access to special topic including create, update and delete all'),
    ),
    'delete any special-topic' => array(
      'title' => t('Delete any special topic'),
      'description' => t('Delete any panel node regardless of ownership'),
    ),
    'delete own special-topic' => array(
      'title' => t('Delete own special topic'),
      'description' => t('Delete any panel node owned by this user.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function special_topic_menu() {
  // Safety: check ctools version
  if (!defined('PANELS_REQUIRED_CTOOLS_API') || !module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
    return array();
  }

  // Avoid some repetition on these:
  $base = array(
    'access callback' => 'special_topic_edit_node',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/special_topic_layout'] = array(
    'title' => 'Special topic layout',
    'page callback' => 'special_topic_edit_layout',
    'weight' => 2,
  ) + $base;

  $items['node/%node/special_topic_content'] = array(
    'title' => 'Special topic content',
    'page callback' => 'special_topic_edit_content',
    'weight' => 3,
  ) + $base;

  $items['node/add/special-topic/choose-layout'] = array(
    'title' => 'Choose layout',
    'access arguments' => array('create panel-nodes'),
    'page callback' => 'special_topic_add',
    'type' => MENU_CALLBACK,
  );

  $items['specialtopic/ajax/nodeslist'] = array(
    'title' => 'Choose Topic Position',
    'access callback' => TRUE,
    'page callback' => 'special_topic_ajax_nodes_list',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback to determine if a user has edit access
 */
function special_topic_edit_node($node) {
  if (!isset($node->special_topic)) {
    return FALSE;
  }
  return node_access('update', $node);
}

/**
 * Implementation of hook_access().
 */
function special_topic_node_access($node, $op, $account) {
  if ($op == 'create' && $node != 'special_topic') {
    return NODE_ACCESS_IGNORE;
  }
  if (is_object($node) && $node->type != 'special_topic') {
    return NODE_ACCESS_IGNORE;
  }
  if (user_access('administer special-topic', $account)) {
    return NODE_ACCESS_ALLOW;
  }
  if ($op == 'create' && user_access('create special-topic', $account)) {
    return NODE_ACCESS_ALLOW;
  }
  if ($op == 'update' && (user_access('edit any special-topic', $account) || $node->uid == $account->uid && user_access('edit own special-topic', $account))) {
    return NODE_ACCESS_ALLOW;
  }
  if ($op == 'delete' && (user_access('delete any special-topic') || $node->uid == $account->uid && user_access('delete own special-topic'))) {
    return NODE_ACCESS_ALLOW;
  }
}

/**
 * Implementation of hook_ctools_plugin_directory
 */
function special_topic_ctools_plugin_directory($module, $plugin) {
  if($module == 'ctools' || $module == 'special_topic'){
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_ctools_plugin_type()
 * Provide topic_render plugin type
 */
function special_topic_ctools_plugin_type() {
  $plugins['topic_render'] = array(

  );
  return $plugins;
}



/***************************************************************
 * Field Type API hooks
 * Provide field_special_topic
 * Attach node to a special topic
 ***************************************************************/

/**
 * Implements hook_field_info().
 */
function special_topic_field_info() {
  return array(
    'field_special_topic' => array(
      'label' => t('Add to special topic'),
      'description' => t('Add node to a special topic page.'),
      'default_widget' => 'special_topic_position_select',
      'default_formatter' => 'special_topic_simple_link',
    ),
  );
}



/**
 * Implements hook_field_is_empty().
 */
function special_topic_field_is_empty($item, $field) {
  return empty($item['special_id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function special_topic_field_formatter_info() {
  return array(
    'special_topic_simple_link' => array(
      'label' => t('Simple link to special topic'),
      'field types' => array('field_special_topic'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function special_topic_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'special_topic_simple_link':
      foreach ($items as $delta => $item) {
        if(isset($item['special_id']) && $node=node_load($item['special_id'])){
          $element[$delta] = array(
            '#theme' => 'link',
            '#text' => $node->title,
            '#path' => 'node/'.$node->nid,
            '#options' => array(
              'attributes' => array(),
              'html' => FALSE,
            ),
          );
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function special_topic_field_widget_info() {
  return array(
    'special_topic_position_select' => array(
      'label' => t('Select special topic and position'),
      'field types' => array('field_special_topic'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function special_topic_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $special_id = isset($items[$delta]['special_id']) ? $items[$delta]['special_id'] : 0;
  // for ajax, we need to get data from the chosen special topic
  if(!empty($form_state['triggering_element']['#parents'])){
    $parents = $form_state['triggering_element']['#parents'];
    $special_id = (int)$form_state['values'][$parents[0]][$parents[1]][$parents[2]][$parents[3]];
  }

  $special_position = isset($items[$delta]['special_position']) ? $items[$delta]['special_position'] : '';
  $options = array();
  $options[0] = t('None');
  $topics = special_topic_get_active($special_id);

  if(!empty($topics)){
    $nids = array_keys($topics);
    $nodes = entity_load('node', $nids);
    foreach($nodes as $item){
      $options[$item->nid] = $item->title;
    }
  }
  $element += array(
    '#type' => 'fieldset',
  );

  $element['special_id'] = array(
    '#type' => 'select',
    '#title' => t('Special topic ID'),
    '#options' => $options,
    '#default_value' => $special_id,
    '#description' => t('Select the special topic'),
    '#ajax' => array(
      'callback' => 'special_topic_field_widget_form_replace',
      'wrapper' => 'special-position-replace',
    ),
  );
  $special_position_options = special_topic_get_positions($special_id);
  $element['special_position'] = array(
    '#type' => 'select',
    '#title' => t('Special topic position'),
    '#description' => t('Choose the position you want to place you node on the special topic'),
    '#default_value' => $special_position,
    '#options' => $special_position_options,
    '#prefix' => '<div id="special-position-replace">',
    '#suffix' => '</div>',
  );
  return $element;
}

/**
 * form ajax callback, special_id change
 */
function special_topic_field_widget_form_replace($form, $form_state) {
  $parents = $form_state['triggering_element']['#parents'];
  return $form[$parents[0]][$parents[1]][$parents[2]]['special_position'];
}


/***************************************************************
 * Node Type API hooks
 ***************************************************************/

 /**
 * Implements hook_node_info().
 */
function special_topic_node_info() {
  // Safety: go away if CTools is not at an appropriate version.
  if (!defined('PANELS_REQUIRED_CTOOLS_API') || !module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
    return array();
  }

  return array(
    'special_topic' => array(
      'name' => t('Special Topic'),
      'base' => 'special_topic_hook',
      'description' => t('Provide special topic page to archive nodes.'),
      'title_label' => t('Special Topic Title'),
      'locked' => TRUE,
    ),
  );
}


/**
 * Implementation of hook_form().
 */
function special_topic_hook_form(&$node, &$form_state) {
  ctools_include('plugins', 'panels');

  $form['special_topic']['#tree'] = TRUE;
  if (empty($node->nid) && arg(0) == 'node' && arg(1) == 'add') {
    // force user to choose layout first
    $panel_layout = isset($node->panel_layout) ? $node->panel_layout : arg(3);
    if (empty($panel_layout)) {
      $opts = $_GET;
      unset($opts['q']);
      return drupal_goto('node/add/special-topic/choose-layout', $opts);
    }

    $layout = panels_get_layout($panel_layout);
    if (empty($layout)) {
      return drupal_not_found();
    }
    $form['special_topic']['layout'] = array(
      '#type' => 'value',
      '#value' => $panel_layout,
    );
  }

  $type = node_type_get_type($node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['special_topic']['css_id'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS ID'),
    '#size' => 30,
    '#description' => t('An ID that can be used by CSS to style the special topic.'),
    '#default_value' => empty($node->special_topic['css_id']) ? '' : $node->special_topic['css_id'],
  );

  // Support for different rendering pipelines
  // Mostly borrowed from panel_context.inc
  $pipelines = panels_get_renderer_pipelines();

  $options = array();
  foreach ($pipelines as $name => $pipeline) {
    $options[$name] = check_plain($pipeline->admin_title) . '<div class="description">' . check_plain($pipeline->admin_description) . '</div>';
  }
  $form['special_topic']['pipeline'] = array(
    '#type' => 'radios',
    '#options' => $options,
    '#title' => t('Renderer'),
    '#default_value' => isset($node->special_topic['pipeline']) ? $node->special_topic['pipeline'] : 'standard',
  );

  $form['special_topic']['positions'] = array(
    '#type' => 'textarea',
    '#title' => t('Positions to place topic content'),
    '#description' => t('One line each position'),
    '#default_value' => empty($node->special_topic['positions']) ? '' : $node->special_topic['positions'],
  );

  return $form;
}


/**
 * Override of node add page to force layout selection prior
 * to actually editing a node.
 */
function special_topic_add() {
  $output = '';

  ctools_include('plugins', 'panels');
  ctools_include('common', 'panels');

  $layouts = panels_common_get_allowed_layouts('special_topic');
  return panels_common_print_layout_links($layouts, 'node/add/special-topic', array('query' => $_GET));
}

/**
 * Implementation of hook_validate().
 */
function special_topic_hook_validate($node, $form, &$form_state) {
  if (!$node->nid && empty($node->special_topic['layout'])) {
    form_error($form['special_topic']['layout'], t('Please select a layout.'));
  }
}


/**
 * Implementation of hook_load().
 */
function special_topic_hook_load($nodes) {
  $result = db_query("SELECT * FROM {special_topic} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->special_topic = (array) $record;
  }
}

/**
 * Implementation of hook_insert().
 */
function special_topic_hook_insert(&$node) {
  // Create a new display and record that.
  $display = panels_new_display();
  $display->layout = $node->special_topic['layout'];

  panels_save_display($display);
  $node->special_topic['did'] = $display->did;

  db_insert('special_topic')
    ->fields(array(
      'nid' => $node->nid,
      'did' => $display->did,
      'css_id' => $node->special_topic['css_id'],
      'pipeline' => $node->special_topic['pipeline'],
      'positions' => $node->special_topic['positions'],
    ))
    ->execute();
}

/**
 * Implementation of hook_delete().
 */
function special_topic_hook_delete(&$node) {
  db_delete('special_topic')->condition('nid', $node->nid)->execute();
  if (!empty($node->special_topic['did'])) {
    panels_delete_display($node->special_topic['did']);
  }
}

/**
 * Implementation of hook_update().
 */
function special_topic_hook_update($node) {
  db_update('special_topic')
    ->condition('nid', $node->nid)
    ->fields(array(
      'css_id' => $node->special_topic['css_id'],
      'pipeline' => $node->special_topic['pipeline'],
      'positions' => $node->special_topic['positions'],
    ))
    ->execute();
}

/**
 * Implementation of hook_view().
 */
function special_topic_hook_view($node, $view_mode) {
  static $rendering = array();

  // Prevent loops if someone foolishly puts the node inside itself:
  if (!empty($rendering[$node->nid])) {
    return $node;
  }

  $rendering[$node->nid] = TRUE;
  ctools_include('plugins', 'panels');
  if ($view_mode == 'teaser') {
    // Because our teasier is never the same as our content, *always* provide
    // the read more flag.
    $node->readmore = TRUE;
  }
  else {
    if (!empty($node->special_topic['did'])) {
      $display = panels_load_display($node->special_topic['did']);
      $display->css_id = $node->special_topic['css_id'];
      // TODO: Find a way to make sure this can't node_view.
      $display->context = special_topic_get_context($node);
      $display->cache_key = 'special_topic:' . $node->nid;
      $renderer = panels_get_renderer($node->special_topic['pipeline'], $display);
      $node->content['body'] = array(
        '#markup' => panels_render_display($display, $renderer),
        '#weight' => 0,
      );
    }
  }
  unset($rendering[$node->nid]);
  return $node;
}


/***************************************************************
 * General Functions
 ***************************************************************/

/**
 * Pass through to the panels layout editor.
 */
function special_topic_edit_layout($node) {
  ctools_include('context');
  $display = panels_load_display($node->special_topic['did']);
  $display->context = special_topic_get_context($node);
  return panels_edit_layout($display, t('Save'), "node/$node->nid/special_topic_layout", 'special_topic');
}

/**
 * Pass through to the panels content editor.
 */
function special_topic_edit_content($node) {
  ctools_include('context');
  $display = panels_load_display($node->special_topic['did']);
  $display->context = special_topic_get_context($node);
  ctools_include('common', 'panels');
  $content_types = panels_common_get_allowed_types('special_topic', $display->context);

  return panels_edit($display, "node/$node->nid/special_topic_content", $content_types);
}

/**
 * Build the context to use for a panel node.
 */
function special_topic_get_context(&$node) {
  ctools_include('context');
  $context = ctools_context_create('node', $node);
  $context->identifier = t('This Special Topic');
  $context->keyword = 'node';
  return array('special-topic' => $context);
}

/**
 * Get all positions from a topic
 */
function special_topic_get_positions($nid){
  $node = node_load($nid);
  $data = array();
  if(empty($node->special_topic['positions'])){
    return $data;
  }
  $links = explode("\n", $node->special_topic['positions']);
  $curline = 1;
  foreach($links as $val){
    if(!$val){
      continue;
    }
    $val = trim($val);
    $data[$val] = $val;
  }
  return $data;
}

/**
 * the option string of a special topic position field
 * return ajax content
 */
function special_topic_ajax_nodes_list(){
  $data = special_topic_get_positions((int)$_POST['topic_id']);
  $options .= '<option value="">All</option>';
  foreach ($data as $key => $value) {
    $options .= '<option value="' . check_plain($key) . '">' . filter_xss_admin($value) . '</option>';
  }
  $commands[] = ajax_command_invoke('#edit-special-position', 'html', array($options));
  print ajax_render($commands);
  exit();
}

/**
 * Get the nids of all active special topics
 * todo: add filter options
 */
function special_topic_get_active(){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'special_topic')
    ->propertyCondition('status', 1);
  $result = $query->execute();
  return $result['node'];
}


/**
 * Get all topic_render plugins
 */
function special_topic_get_render_types() {
  ctools_include('plugins');
  return ctools_get_plugins('special_topic', 'topic_render');
}
